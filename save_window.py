# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'save_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import json
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QTextEdit
from PyQt5.QtCore import QMimeData

class PlainTextEdit(QTextEdit):
    def insertFromMimeData(self, source: QMimeData):
        """Переопределение вставки текста, чтобы убирать форматирование"""
        if source.hasText():
            self.insertPlainText(source.text())

class Ui_Dialog(object):
    def __init__(self):
        self.type_list = []
        self.brand_list = []
        self.model_list = []


    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(376, 310)
        icon = QIcon("parserico.ico")
        Dialog.setWindowIcon(icon)

        # self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit = PlainTextEdit(Dialog)

        self.textEdit.setGeometry(QtCore.QRect(20, 130, 311, 111))
        self.textEdit.setObjectName("textEdit")


        self.type_comboBox = QtWidgets.QComboBox(Dialog)
        self.type_comboBox.setEditable(True)
        self.type_comboBox.setGeometry(QtCore.QRect(20, 30, 311, 22))
        self.type_comboBox.setObjectName("type_comboBox")
        self.type_comboBox.addItem("")
        self.type_comboBox.setCurrentText("")
        self.type_comboBox.addItems(self.GetType())
        self.type_comboBox.currentTextChanged.connect(self.GetBrand)

        self.brand_comboBox = QtWidgets.QComboBox(Dialog)
        self.brand_comboBox.setEditable(True)
        self.brand_comboBox.setGeometry(QtCore.QRect(20, 80, 311, 22))
        self.brand_comboBox.setObjectName("brand_comboBox")
        self.brand_comboBox.currentTextChanged.connect(self.GetModel)

        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(20, 10, 131, 16))
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(20, 60, 131, 16))
        self.label_2.setObjectName("label_2")

        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(20, 110, 281, 16))
        self.label_3.setObjectName("label_3")

        del_ico = self.resource_path("del.png")
        delicon = QtGui.QIcon()
        delicon.addPixmap(QtGui.QPixmap(del_ico), QtGui.QIcon.Normal, QtGui.QIcon.Off)

        self.btndelType = QtWidgets.QPushButton(Dialog)
        self.btndelType.setGeometry(QtCore.QRect(340, 29, 30, 24))
        self.btndelType.setObjectName("btndelType")
        self.btndelType.clicked.connect(self.DeleteType)
        self.btndelType.setIcon(delicon)
        self.btndelType.setIconSize(QtCore.QSize(35, 35))
        self.btndelType.setAutoDefault(False)
        self.btndelType.setDefault(False)
        self.btndelType.setFlat(True)

        self.btndelBrand = QtWidgets.QPushButton(Dialog)
        self.btndelBrand.setGeometry(QtCore.QRect(340, 79, 30, 24))
        self.btndelBrand.setObjectName("btndelBrand")
        self.btndelBrand.clicked.connect(self.DeleteBrand)
        self.btndelBrand.setIcon(delicon)
        self.btndelBrand.setIconSize(QtCore.QSize(35, 35))
        self.btndelBrand.setAutoDefault(False)
        self.btndelBrand.setDefault(False)
        self.btndelBrand.setFlat(True)

        self.btnSave = QtWidgets.QPushButton(Dialog)
        self.btnSave.setGeometry(QtCore.QRect(70, 250, 221, 41))
        self.btnSave.setObjectName("btnSave")
        self.btnSave.clicked.connect(self.SaveModels)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Добавление модели"))
        self.label.setText(_translate("Dialog", "Укажите тип"))
        self.label_2.setText(_translate("Dialog", "Укажите бренд"))
        self.label_3.setText(_translate("Dialog", "Через запятую укажите список моделей"))
        self.btnSave.setText(_translate("Dialog", "Сохранить"))



    def GetType(self):
        with open("search.json", 'r', encoding='utf-8') as f:
            searchlist = json.load(f)
        self.type_list =list(searchlist['Type'].keys())
        return self.type_list

    def GetBrand(self, t):
        self.brand_comboBox.clear()
        with open("search.json", 'r', encoding='utf-8') as f:
            searchlist = json.load(f)

        if (t in searchlist['Type'] and 'Brand' in searchlist['Type'][f'{t}'] ):
            self.brand_list = list(searchlist['Type'][f'{t}']['Brand'])
            self.brand_comboBox.addItems(self.brand_list)
        return self.brand_list

    def GetModel(self, brand):
        """Отображает список моделей для выбранного бренда и типа"""
        current_type = self.type_comboBox.currentText()
        if current_type == "-" or brand == "-":
            self.textEdit.clear()
            return

        with open("search.json", 'r', encoding='utf-8') as f:
            searchlist = json.load(f)

        # Проверяем, что текущий тип и бренд есть в структуре
        if (current_type in searchlist['Type']
                and 'Brand' in searchlist['Type'][current_type]
                and brand in searchlist['Type'][current_type]['Brand']):

            # Достаем список моделей для конкретного бренда и выводим их
            models = searchlist['Type'][current_type]['Brand'][brand]
            self.textEdit.setText(", ".join(models))
        else:
            self.textEdit.clear()

    def SaveModels(self):
        """Сохраняет изменения в списке моделей для текущего типа и бренда"""
        current_type = self.type_comboBox.currentText()
        current_brand = self.brand_comboBox.currentText()

        if current_type == "-" or current_brand == "-":
            QtWidgets.QMessageBox.warning(None, "Ошибка", "Пожалуйста, выберите тип и бренд перед сохранением.")
            return

        # Получаем текст из textEdit и разделяем его на список моделей
        models_text = self.textEdit.toPlainText().strip()
        if not models_text:
            response = QtWidgets.QMessageBox.question(None, "Подтверждение",
                                                      "Поле пустое. Вы хотите удалить все модели для выбранного типа и бренда?",
                                                      QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
            if response == QtWidgets.QMessageBox.No:
                return

        models = [model.strip() for model in models_text.split(",") if model.strip()]

        with open("search.json", 'r', encoding='utf-8') as f:
            searchlist = json.load(f)

        # Проверяем, что разделы существуют, если нет, то создаем их
        if current_type not in searchlist['Type']:
            searchlist['Type'][current_type] = {'Brand': {}}
        if current_brand not in searchlist['Type'][current_type]['Brand']:
            searchlist['Type'][current_type]['Brand'][current_brand] = []

        # Обновляем список моделей и перезаписываем существующий список
        searchlist['Type'][current_type]['Brand'][current_brand] = models

        with open("search.json", 'w', encoding='utf-8') as f:
            json.dump(searchlist, f, ensure_ascii=False, indent=4)

        QtWidgets.QMessageBox.information(None, "Успех", "Модели успешно сохранены!")

    def DeleteType(self):
        """Удаляет выбранный тип и всю связанную с ним информацию из файла JSON."""
        current_type = self.type_comboBox.currentText().strip()

        if not current_type:
            QtWidgets.QMessageBox.warning(None, "Ошибка", "Пожалуйста, выберите тип для удаления.")
            return

        with open("search.json", 'r', encoding='utf-8') as f:
            searchlist = json.load(f)

        if current_type in searchlist['Type']:
            del searchlist['Type'][current_type]  # Удаляем тип
            with open("search.json", 'w', encoding='utf-8') as f:
                json.dump(searchlist, f, ensure_ascii=False, indent=4)

            self.type_comboBox.clear()
            self.type_comboBox.addItems(self.GetType())  # Обновляем список типов
            self.brand_comboBox.clear()
            self.brand_comboBox.addItems(self.GetBrand(current_type))  # Обновляем список брендов
            self.type_comboBox.setCurrentText("")
            self.brand_comboBox.setCurrentText("")
            self.textEdit.clear()
            QtWidgets.QMessageBox.information(None, "Успех", f"Тип '{current_type}' успешно удален.")
        else:
            QtWidgets.QMessageBox.warning(None, "Ошибка", f"Тип '{current_type}' не найден.")

    def DeleteBrand(self):
        """Удаляет выбранный бренд из текущего типа."""
        current_type = self.type_comboBox.currentText().strip()
        current_brand = self.brand_comboBox.currentText().strip()

        if not current_type or not current_brand:
            QtWidgets.QMessageBox.warning(None, "Ошибка", "Пожалуйста, выберите бренд для удаления.")
            return

        with open("search.json", 'r', encoding='utf-8') as f:
            searchlist = json.load(f)

        if current_type in searchlist['Type'] and current_brand in searchlist['Type'][current_type]['Brand']:
            del searchlist['Type'][current_type]['Brand'][current_brand]  # Удаляем бренд
            with open("search.json", 'w', encoding='utf-8') as f:
                json.dump(searchlist, f, ensure_ascii=False, indent=4)

            self.brand_comboBox.clear()
            self.brand_comboBox.addItems(self.GetBrand(current_type))  # Обновляем список брендов
            self.type_comboBox.clear()
            self.type_comboBox.addItems(self.GetType())  # Обновляем список типов
            self.type_comboBox.setCurrentText("")
            self.brand_comboBox.setCurrentText("")
            self.textEdit.clear()
            QtWidgets.QMessageBox.information(None, "Успех",
                                              f"Бренд '{current_brand}' успешно удален из типа '{current_type}'.")
        else:
            QtWidgets.QMessageBox.warning(None, "Ошибка", f"Бренд '{current_brand}' не найден в типе '{current_type}'.")
    def resource_path(self, relative_path):
        if hasattr(sys, '_MEIPASS'):
            return os.path.join(sys._MEIPASS, relative_path)
        return os.path.join(os.path.abspath("."), relative_path)



if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
